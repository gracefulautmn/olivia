// lib/features/chat/data/models/message_model.dart

import 'package:olivia/features/chat/domain/entities/message.dart'; // Ganti 'olivia' dengan nama proyek Anda

class MessageModel extends MessageEntity {
  const MessageModel({
    required super.id,
    required super.chatRoomId, // chatRoomId tetap required di entitas
    required super.senderId,
    required super.content,
    required super.sentAt,
    super.isRead,
  });

  // Modifikasi factory method untuk menerima chatRoomId sebagai parameter
  factory MessageModel.fromJson(Map<String, dynamic> json, String contextChatRoomId) {
    final id = json['id']?.toString();
    final senderId = json['sender_id']?.toString();
    final content = json['content']?.toString();
    final sentAtString = json['sent_at']?.toString();

    if (id == null || id.isEmpty) {
      throw FormatException("Message ID is null or empty in JSON: $json");
    }
    if (senderId == null || senderId.isEmpty) {
      throw FormatException("Message senderId is null or empty in JSON: $json");
    }
    if (content == null) { // content boleh kosong, tapi tidak null jika fieldnya String
      throw FormatException("Message content is null in JSON: $json");
    }
    if (sentAtString == null || sentAtString.isEmpty) {
      throw FormatException("Message sentAt is null or empty in JSON: $json");
    }

    return MessageModel(
      id: id,
      chatRoomId: contextChatRoomId, // Gunakan chatRoomId dari konteks
      senderId: senderId,
      content: content, // Jika content bisa string kosong, `?? ''` tidak perlu jika sudah String
      sentAt: DateTime.parse(sentAtString),
      isRead: (json['is_read'] as bool?) ?? false,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      // 'id' biasanya auto-generated by DB atau di-generate client sebelum insert
      'chat_room_id': chatRoomId,
      'sender_id': senderId,
      'content': content,
      'sent_at': sentAt.toIso8601String(), // Kirim sent_at jika di-generate client
      'is_read': isRead,
    };
  }
}

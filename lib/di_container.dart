// lib/di_container.dart

import 'package:get_it/get_it.dart';
import 'package:injectable/injectable.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:internet_connection_checker_plus/internet_connection_checker_plus.dart';

import 'di_container.config.dart'; // Generated by injectable

final GetIt sl = GetIt.instance;

@InjectableInit(
  initializerName: r'$initGetIt', // default
  preferRelativeImports: true, // default
  asExtension: false, // default
)
Future<void> configureDependencies() async {
  // Daftarkan SupabaseClient secara manual karena instance-nya sudah ada
  // dan injectable mungkin tidak bisa meng-handle-nya dengan mudah jika
  // tidak dibuat melalui factory method yang di-anotasi.
  if (!sl.isRegistered<SupabaseClient>()) {
    final supabaseInstance = Supabase.instance.client;
    sl.registerSingleton<SupabaseClient>(supabaseInstance);
  }
  
  // Panggil fungsi yang di-generate oleh injectable
  await $initGetIt(sl);
}

Future<void> _initManualDependencies() async {
  // Daftarkan SupabaseClient
  // Kita bisa mengambil instance yang sudah diinisialisasi di main.dart
  final supabaseInstance = Supabase.instance.client;
  sl.registerSingleton<SupabaseClient>(supabaseInstance);

  // Daftarkan SupabaseService (jika kita membuatnya sebagai wrapper)
  // Untuk saat ini, kita langsung daftarkan SupabaseClient.
  // Jika Anda membuat SupabaseService, daftarkan di sini:
  // sl.registerLazySingleton<SupabaseService>(() => SupabaseService(sl()));
}

@module
abstract class ThirdPartyInjectableModule {
  @lazySingleton
  InternetConnectionCheckerPlus get internetConnectionChecker => InternetConnectionCheckerPlus();
}
// Fungsi init utama untuk dependency injection
// Kita akan menggantinya dengan @InjectableInit setelah setup injectable selesai
// Untuk sekarang, kita akan mendaftarkan AuthCubit secara manual juga
// karena kita belum menjalankan build_runner untuk injectable.
Future<void> init() async {
  await _initManualDependencies();

  // --- FITUR AUTH ---
  // Registrasi AuthCubit (manual untuk sekarang, akan diganti injectable)
  // Pastikan Anda sudah membuat AuthCubit.dart
  // Jika AuthCubit belum ada, baris ini akan error.
  // Kita akan uncomment dan sesuaikan setelah AuthCubit dan dependensinya (use cases) siap.

  // Contoh registrasi manual jika belum pakai injectable untuk AuthCubit:
  // sl.registerFactory<AuthCubit>(
  //   () => AuthCubit(
  //     supabaseClient: sl<SupabaseClient>(),
  //     // loginUser: sl(), // Akan error jika LoginUser belum diregister
  //     // logoutUser: sl(),
  //     // getCurrentUserProfile: sl(),
  //     // updateUserProfile: sl(),
  //   ),
  // );


  // Panggil fungsi yang di-generate oleh injectable (setelah setup)
  // await $initGetIt(sl); // Uncomment setelah menjalankan build_runner
}

// --- Konfigurasi untuk Injectable ---
// Anda perlu menambahkan anotasi @module atau @injectable pada kelas-kelas
// yang ingin Anda daftarkan secara otomatis.

// Contoh Module untuk mendaftarkan dependensi eksternal atau yang butuh factory method
// @module
// abstract class RegisterModule {
//   @lazySingleton
//   InternetConnectionCheckerPlus get internetConnectionChecker => InternetConnectionCheckerPlus();

//   // SupabaseClient sudah kita daftarkan manual, jadi tidak perlu di sini jika sudah.
//   // Jika ingin via injectable module:
//   // @lazySingleton
//   // SupabaseClient get supabaseClient => Supabase.instance.client;
// }

// Setelah Anda menambahkan anotasi @injectable, @lazySingleton, @factoryMethod, dll.
// pada kelas-kelas Anda (misal: AuthCubit, repositories, datasources, usecases),
// jalankan perintah berikut di terminal:
// flutter pub run build_runner build --delete-conflicting-outputs
// Ini akan menghasilkan file `di_container.config.dart`.
// Kemudian uncomment baris `import 'di_container.config.dart';`
// dan `await $initGetIt(sl);`.
